// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  courses       CourseEnrollment[]
  mentorships   Mentorship[]
  payments      Payment[]
}

model Course {
  id          String    @id @default(cuid())
  title       String
  description String
  duration    String
  level       String
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  enrollments CourseEnrollment[]
  lessons     Lesson[]
}

model CourseEnrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  status    EnrollmentStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String
  duration    Int      // in minutes
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id])
}

model Mentorship {
  id          String   @id @default(cuid())
  mentorId    String
  menteeId    String
  status      MentorshipStatus @default(ACTIVE)
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  mentor      User     @relation("Mentor", fields: [mentorId], references: [id])
  mentee      User     @relation("Mentee", fields: [menteeId], references: [id])
}

model Payment {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  status      PaymentStatus @default(PENDING)
  type        PaymentType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  MENTOR
  ADMIN
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MentorshipStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentType {
  COURSE
  MENTORSHIP
  SUBSCRIPTION
} 